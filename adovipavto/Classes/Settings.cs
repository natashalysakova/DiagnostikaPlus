using System;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

namespace adovipavto.Classes
{
    [XmlRoot(elementName: "Settings")]
    public class Settings
    {
        private static Settings _instance;

        public static Settings Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new Settings();
                }
                return _instance;
            }
        }
        [XmlElement("Server")]
        public string Server { set; get; }
        [XmlElement("AutoGeneratedData")]
        public bool AutoGeneratedData { get; set; }
        [XmlElement("BackupDirectory")]
        public string BackupDirectory { get; set; }
        [XmlElement("FilesDirectory")]
        public string FilesDirectory { get; set; }
        [XmlElement("LastUsedMechanic")]
        public string LastUsedMechanic { get; set; }
        [XmlElement("TmpLanguage")]
        public string TmpLanguage { get; set; }
        [XmlElement("Language")]
        public string Language { get; set; }

        readonly string _fileSettingPath = "settings.xml";

        private Settings()
        {

            string path = Path.GetPathRoot(Environment.SystemDirectory) + @"DiagnostikaData\";

            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);

            }

            FilesDirectory = path;

            if (!File.Exists(FilesDirectory + _fileSettingPath))
            {
                string tmp = @"BackupNormatives\" + _fileSettingPath;
                if (File.Exists(tmp))
                {
                    File.Copy(tmp, FilesDirectory + _fileSettingPath);
                }
            }
        }

        public void Load()
        {
                var serializer = new XmlSerializer(this.GetType());
            using (var reader = new StreamReader(FilesDirectory + _fileSettingPath))
            {
                var tmp = (Settings) serializer.Deserialize(reader);
                if (tmp != null)
                {
                    AutoGeneratedData = tmp.AutoGeneratedData;

                    BackupDirectory = tmp.BackupDirectory;
                    Server = tmp.Server;
                    LastUsedMechanic = tmp.LastUsedMechanic;
                    Language = tmp.Language;
                    TmpLanguage = tmp.TmpLanguage;
                }
            }

        }


        public void Save()
        {
            var serializer = new XmlSerializer(typeof(Settings));

            XmlWriter xw = new XmlTextWriter(FilesDirectory + _fileSettingPath, Encoding.UTF8);
            serializer.Serialize(xw, _instance);
            xw.Close();


        }


    }
}
